name: TDD CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort

    - name: Run TDD CI Pipeline
      run: |
        python scripts/ci_test_pipeline.py --coverage-threshold 80

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results (Python ${{ matrix.python-version }})
        path: 'test-results-*.xml'
        reporter: java-junit

    - name: Archive test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          test-results-*.xml
          test-report.json
          htmlcov/
          coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Security scan with Safety
      run: |
        safety check --json --output safety-report.json || true

    - name: Security scan with Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'pull_request'

    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        name: test-artifacts-3.11

    - name: Quality Gate Check
      run: |
        echo "üöÄ Quality Gate Analysis"

        # Check if test report exists
        if [ ! -f test-report.json ]; then
          echo "‚ùå Test report not found"
          exit 1
        fi

        # Parse test results
        python -c "
        import json
        with open('test-report.json') as f:
            report = json.load(f)

        status = report.get('overall_status', 'unknown')
        coverage = report.get('coverage', 0)
        test_counts = report.get('test_counts', {}).get('total', {})

        print(f'Overall Status: {status}')
        print(f'Coverage: {coverage:.1f}%')
        print(f'Tests: {test_counts.get(\"tests\", 0)} total')
        print(f'Failures: {test_counts.get(\"failures\", 0)}')
        print(f'Errors: {test_counts.get(\"errors\", 0)}')

        # Quality gate criteria
        if status != 'success':
            print('‚ùå Quality gate failed: Tests not passing')
            exit(1)

        if coverage < 80:
            print(f'‚ùå Quality gate failed: Coverage {coverage:.1f}% below 80%')
            exit(1)

        if test_counts.get('failures', 0) > 0 or test_counts.get('errors', 0) > 0:
            print('‚ùå Quality gate failed: Test failures or errors')
            exit(1)

        print('‚úÖ Quality gate passed')
        "

  deploy-staging:
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment"
        # Add actual deployment steps here
        echo "Deployment would happen here"

  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment"
        # Add actual deployment steps here
        echo "Production deployment would happen here"